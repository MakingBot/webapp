<?php

include_once ResolveUrl('/dal/loader/AbstractLoader.class');
include_once ResolveUrl('/business/object/Network.class');

class NetworkLoader extends AbstractLoader
{
    private static $instance = null;

    public static function Instance()
    {
        if (is_null(self::$instance))
        {
            self::$instance = new NetworkLoader();
        }
        return self::$instance;
    }

    private function __construct()
    {
    }

    public function getAll(WlanInterface $wlan)
    {
        $networks = array();

        $arr = NmCli::_new()
                ->setWlanName($wlan->name)
                ->setCommand(NmCli::$CMD_GET_SCAN_RESULT)
                ->exec();

        foreach ($arr as $str)
        {
            $ssid = trim($str[0], '\'');

            $currentNetwork = getSingle($networks, 'getSsid()', $ssid);

            if ($currentNetwork == null)
            {
                $currentNetwork = new Network();
                $networks[] = $currentNetwork;
            }

            $scan = new NetworkScan();
            $scan->ssid = trim($str[0], '\'');
            $scan->bssid = str_replace('\\:', ':', $str[1]);
            $scan->signalLevel = $str[5];
            $scan->setSecurity($str[6]);

            if ($str[9] == 'yes')
            {
                $scan->isConnected = TRUE;
                $wlan->currentNetwork = $currentNetwork;
            }

            $currentNetwork->scans[] = $scan;
        }

        $arr = NmCli::_new()
                ->setWlanName($wlan->name)
                ->setCommand(NmCli::$CMD_REGISTRED_NETWORK)
                ->exec();

        foreach ($arr as $str)
        {
            if (strpos($str[2], 'wireless') === FALSE)
            {
                continue;
            }

            $ssid = $str[0];
            $currentNetwork = getSingle($networks, 'getSsid()', $ssid);

            if ($currentNetwork == null)
            {
                $currentNetwork = new Network();
                $networks[] = $currentNetwork;
            }

            $config = new NetworkConfig();
            $config->ssid = $ssid;
            $config->networkId = $str[1];

            $currentNetwork->config = $config;
        }

        return $networks;
    }
}

?>
